"use strict";const{encryptPassword:encryptPassword,verifyPassword:verifyPassword}=require("../utilities/universalFunctions"),{generateToken:generateToken}=require("../config/jwtAuthorization"),userSchema=require("../model/user.model"),random=require("crypto"),statusMessages=require("../config/appConstants"),findUser=async(s,e,a)=>{try{const t=s.body.email.toLowerCase(),R=await userSchema.findOne({email:t});R&&R.email===t?e.json(statusMessages.ERROR_MSG.EMAIL_EXIST):a()}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},registerUser=async(s,e)=>{try{const a=random.randomBytes(4).toString("hex"),t=new userSchema(s.body);t.first_name=t.first_name.charAt(0).toUpperCase()+t.first_name.slice(1),t.last_name=t.last_name.charAt(0).toUpperCase()+t.last_name.slice(1),t.city=t.city.charAt(0).toUpperCase()+t.city.slice(1);const R=await encryptPassword(t.password);if(R){t.password=R,t.email=t.email.toLowerCase(),t.profile_id=a;const s=await t.save();s?(statusMessages.SUCCESS_MSG.SUCCESS.data=s,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.UNABLE_TO_REGISTER)}else e.json(statusMessages.ERROR_MSG.SOMETHING_WENT_WRONG)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},loginUser=async(s,e,a)=>{try{const{password:t}=s.body,R=s.body.email.toLowerCase(),S=await userSchema.findOne({email:R.toLowerCase()});if(S)if(S){const r=S.email.toLowerCase();if(R!=r)e.json(statusMessages.ERROR_MSG.EMAIL_NOT_FOUND);else if(R===r){const R=S.password,o=await verifyPassword(t,R);if(o){const{_id:t,username:R,first_name:o,last_name:n,profile_id:_,user_type:M,profile_image:g}=S,i=await generateToken(r,R,t,M);i?(s.token=i,s._id=t,s.profile_image=g,s.first_name=o,s.last_name=n,a()):e.json(statusMessages.ERROR_MSG.SOMETHING_WENT_WRONG)}else e.json(statusMessages.ERROR_MSG.EMAIL_OR_PASSWORD)}}else e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND);else e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},getOneUser=async(s,e)=>{try{const{id:a}=s.query,t=await userSchema.findById({_id:a});t?(statusMessages.SUCCESS_MSG.SUCCESS.data=t,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},getAllUser=async(s,e)=>{try{const s=await userSchema.find().sort({createdAt:-1});s?(statusMessages.SUCCESS_MSG.SUCCESS.data=s,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},sortAllUser=async(s,e)=>{try{const{fieldName:t,orderBy:R}=s.query;async function a(s){const a=await userSchema.find().sort(s);a?(statusMessages.SUCCESS_MSG.SUCCESS.data=a,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}"first_name"===t?a({first_name:parseInt(R)}):"gender"===t?a({gender:parseInt(R)}):"blood_group"===t?a({blood_group:parseInt(R)}):"city"===t&&a({city:parseInt(R)})}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},filterUser=async(s,e)=>{try{const{search:t}=s.query;if(t){const s={$or:[{first_name:{$regex:new RegExp(`${t}`,"gi","+")}},{gender:{$regex:new RegExp(`^${t}`,"gi","+")}},{blood_group:{$regex:new RegExp(`^${t}`,"gi","+")}},{city:{$regex:new RegExp(`^${t}`,"gi","+")}}]};a(s)}else{const s={};a(s)}async function a(s){const a=await userSchema.paginate(s);a?(statusMessages.SUCCESS_MSG.SUCCESS.data=a,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},allGroup=async(s,e)=>{try{const{bloodGroup:a}=s.body,t=await userSchema.find({blood_group:a});t?(statusMessages.SUCCESS_MSG.SUCCESS.data=t,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},updateUser=async(s,e)=>{try{const{password:a}=s.body,{_id:t}=s.user,R=await encryptPassword(a);if(R){const a=await userSchema.findByIdAndUpdate({_id:t},s.body,{returnOriginal:!1});a?(statusMessages.SUCCESS_MSG.SUCCESS.data=a,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.UNABLE_TO_UPDATE)}else e.json(statusMessages.ERROR_MSG.SOMETHING_WENT_WRONG)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},forgotPassword=async(s,e)=>{try{const{email:a,password:t}=s.body,R=a.toLowerCase(),S=await encryptPassword(t);if(S){const s=await userSchema.findOneAndUpdate({email:R},{password:S});s?(statusMessages.SUCCESS_MSG.SUCCESS.data=s,e.json(statusMessages.SUCCESS_MSG.SUCCESS)):e.json(statusMessages.ERROR_MSG.UNABLE_TO_UPDATE)}else e.json(statusMessages.ERROR_MSG.SOMETHING_WENT_WRONG)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},deleteUser=async(s,e,a)=>{try{const{id:t}=s.query,R=await userSchema.findByIdAndDelete({_id:t});R?(s.file=R.profile_image.fileName,a()):e.json(statusMessages.ERROR_MSG.DATA_NOT_FOUND)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},contactUser=async(s,e,a)=>{try{const{donor_id:t}=s.query;if(t){const{email:R,first_name:S}=await userSchema.findById({_id:t});R&&S?(s.request={email:R,first_name:S},a()):e.json(statusMessages.ERROR_MSG.UNABLE_TO_MAKE_REQUEST)}else e.json(statusMessages.ERROR_MSG.SOMETHING_WENT_WRONG)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}},logOutUser=async(s,e)=>{try{console.log("Check Ress"),e.cookie("_SESSION_ID_","",{expires:new Date}),e.cookie("_USER_AUTHORIZATION_","",{expires:new Date}),e.cookie("_BLOODBANK_SESSION_","",{expires:new Date}),e.json(statusMessages.SUCCESS_MSG.LOG_OUT)}catch(s){statusMessages.ERROR_MSG.IMP_ERROR.message=s.message,e.status(500).json(statusMessages.ERROR_MSG.IMP_ERROR)}};module.exports={findUser:findUser,registerUser:registerUser,loginUser:loginUser,getOneUser:getOneUser,getAllUser:getAllUser,filterUser:filterUser,sortAllUser:sortAllUser,allGroup:allGroup,updateUser:updateUser,forgotPassword:forgotPassword,deleteUser:deleteUser,contactUser:contactUser,logOutUser:logOutUser};