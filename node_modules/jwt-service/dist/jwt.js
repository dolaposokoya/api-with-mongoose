"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _knifecycle = require("knifecycle");

var _yerror = _interopRequireDefault(require("yerror"));

var _ms = _interopRequireDefault(require("ms"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_ENV = {};

/* Architecture Note #1: JWT service

This JWT service is a simple wrapper around the `jsonwebtoken` NPM
 module. It add a level of abstraction simply providing a way to
 sign and verify JSON Web Tokens in my apps.

It also cast error to `YError` ones and adds a tolerance for expired
 tokens so that clock drifts between instances won't be a problem.
It also uses `Knifecycle` for a drop in dependency injection
 support in projetcs using Knifecycle.

Finally, it deal with promises which are more convenient than the
 original API.
*/
const wrappedInitializer = (0, _knifecycle.name)('jwt', (0, _knifecycle.service)((0, _knifecycle.inject)(["?ENV", "JWT", "?time", "?log"], initJWT)));
var _default = wrappedInitializer;
/**
 * Instantiate the JWT service
 * @name initJWTService
 * @function
 * @param  {Object}     services
 * The services to inject
 * @param  {Function}   services.JWT
 * The JWT service configuration object
 * @param  {Function}   [services.log]
 * A logging function
 * @param  {Function}   [services.time]
 * A function returning the current timestamp
 * @return {Promise<JWTService>}
 * A promise of the jwt service
 * @example
 * import initJWTService from 'jwt-service';
 *
 * const jwt = await initJWTService({
 *   JWT: {
 *     secret: 'secret',
 *     duration: '2d',
 *     tolerance: '2h',
 *     algorithms: ['HS256'],
 *   },
 *   log: console.log.bind(console),
 *   time: Date.now.bind(Date),
 * });
 *
 * const token = await jwt.sign({ my: 'payload' });
 */

exports.default = _default;

async function initJWT({
  ENV = DEFAULT_ENV,
  JWT,
  time = Date.now.bind(Date),
  log = noop
}) {
  const JWT_DURATION = readMS(JWT.duration, 'E_BAD_JWT_DURATION');
  const JWT_TOLERANCE = readMS(JWT.tolerance, 'E_BAD_JWT_TOLERANCE', 0);
  const jwtSecret = ENV.JWT_SECRET || JWT.secret;

  if (!jwtSecret) {
    throw new _yerror.default('E_NO_JWT_SECRET');
  }

  if (!(JWT.algorithms && JWT.algorithms.length)) {
    throw new _yerror.default('E_NO_JWT_ALGORITHMS');
  }
  /**
  @typedef JWTService
  */


  const jwtService = {
    sign,
    verify
  };
  /**
   * Sign the given payload
   * @memberof JWTService
   * @param  {Object}   payload      The payload to sign
   * @param  {String}   [algorithm]  The signing algorithm
   * @return {Promise<JWTSignResult>}
   * A promise to be resolved with the signed token.
   * @example
   * const token = await jwt.sign({ my: 'payload' });
   */

  async function sign(payload, algorithm = JWT.algorithms[0]) {
    const issuedAt = time();
    const expiresAt = issuedAt + JWT_DURATION;
    const validAt = issuedAt;

    if (!JWT.algorithms.includes(algorithm)) {
      throw new _yerror.default('E_UNKNOWN_ALGORYTHM', algorithm, JWT.algorithms);
    }

    const token = await new Promise((resolve, reject) => {
      _jsonwebtoken.default.sign(JSON.stringify(_objectSpread({}, payload, {
        iat: Math.floor(issuedAt / 1000),
        exp: Math.floor(expiresAt / 1000),
        nbf: Math.floor(validAt / 1000)
      })), jwtSecret, {
        algorithm
      }, (err, token) => {
        if (err) {
          reject(_yerror.default.wrap(err, 'E_JWT', payload));
          return;
        }

        resolve(token);
      });
    });
    return {
      token,
      issuedAt,
      expiresAt,
      validAt
    };
  }
  /**
   * Verify and decode the given token
   * @memberof JWTService
   * @param  {String}   [token]  The token to decode
   * @return {Promise<Object>}
   * A promise to be resolved with the token payload.
   * @example
   * const payload = await jwt.verify('my.jwt.token');
   */


  async function verify(token) {
    return new Promise((resolve, reject) => {
      _jsonwebtoken.default.verify(token, jwtSecret, {
        algorithms: JWT.algorithms,
        clockTolerance: Math.floor(JWT_TOLERANCE / 1000),
        clockTimestamp: Math.floor(time() / 1000)
      }, (err, decoded) => {
        if (err) {
          if ('TokenExpiredError' === err.name) {
            reject(_yerror.default.wrap(err, 'E_JWT_EXPIRED', token));
            return;
          }

          if ('JsonWebTokenError' === err.name) {
            reject(_yerror.default.wrap(err, 'E_JWT_MALFORMED', token));
            return;
          }

          reject(_yerror.default.wrap(err, 'E_JWT', token));
          return;
        }

        resolve(decoded);
      });
    });
  }

  log('info', 'JWT service initialized!');
  return jwtService;
} // eslint-disable-next-line


function noop(...args) {}

function readMS(value, errorCode, defaultValue = undefined) {
  const isRequired = 'undefined' === typeof defaultValue;
  const hasValue = 'undefined' !== typeof value;
  const finalValue = hasValue ? value : '' + defaultValue;

  if (isRequired && !hasValue) {
    throw new _yerror.default(errorCode, value);
  }

  try {
    const computedDuration = (0, _ms.default)(finalValue);

    if ('undefined' === typeof computedDuration) {
      throw new _yerror.default(errorCode, value);
    }

    return computedDuration;
  } catch (err) {
    throw _yerror.default.wrap(err, errorCode, finalValue);
  }
}