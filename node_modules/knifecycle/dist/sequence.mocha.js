"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _sequence = require("./sequence");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('buildInitializationSequence()', () => {
  it('should work with one level trees', () => {
    const tree = {
      __name: 'lol'
    };

    _assert.default.deepEqual((0, _sequence.buildInitializationSequence)(tree), [['lol']]);
  });
  it('should work with multi-level trees', () => {
    const tree = {
      __name: 'lol',
      __childNodes: [{
        __name: 'lol 1',
        __childNodes: [{
          __name: 'lol 1.1',
          __childNodes: [{
            __name: 'lol 1.1.1',
            __childNodes: []
          }]
        }, {
          __name: 'lol 1.2'
        }]
      }, {
        __name: 'lol 2',
        __childNodes: [{
          __name: 'lol 2.1',
          __childNodes: []
        }]
      }, {
        __name: 'lol 3',
        __childNodes: [{
          __name: 'lol 3.1',
          __childNodes: [{
            __name: 'lol 3.1.1',
            __childNodes: []
          }]
        }]
      }]
    };

    _assert.default.deepEqual((0, _sequence.buildInitializationSequence)(tree), [['lol 1.1.1', 'lol 1.2', 'lol 2.1', 'lol 3.1.1'], ['lol 1.1', 'lol 2', 'lol 3.1'], ['lol 1', 'lol 3'], ['lol']]);
  });
  it('should work with multi-level trees and cross dependencies', () => {
    const tree = {
      __name: 'lol',
      __childNodes: [{
        __name: 'lol 1',
        __childNodes: [{
          __name: 'lol 1.1',
          __childNodes: [{
            __name: 'lol 1.1.1',
            __childNodes: []
          }]
        }, {
          __name: 'lol 1.2'
        }, {
          __name: 'lol 1.3',
          __childNodes: [{
            __name: 'lol 3',
            __childNodes: [{
              __name: 'lol 3.1',
              __childNodes: [{
                __name: 'lol 2',
                __childNodes: [{
                  __name: 'lol 2.1',
                  __childNodes: []
                }]
              }]
            }]
          }]
        }]
      }, {
        __name: 'lol 2',
        __childNodes: [{
          __name: 'lol 2.1',
          __childNodes: []
        }]
      }, {
        __name: 'lol 3',
        __childNodes: [{
          __name: 'lol 3.1',
          __childNodes: [{
            __name: 'lol 2',
            __childNodes: [{
              __name: 'lol 2.1',
              __childNodes: []
            }]
          }]
        }]
      }]
    };

    _assert.default.deepEqual((0, _sequence.buildInitializationSequence)(tree), [['lol 1.1.1', 'lol 1.2', 'lol 2.1'], ['lol 1.1', 'lol 2'], ['lol 3.1'], ['lol 3'], ['lol 1.3'], ['lol 1'], ['lol']]);
  });
});